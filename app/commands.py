import click
import random
from . import db
from flask.cli import with_appcontext
from faker import Faker
from .models import User
from .models import Sector
from .models import Subject
from .models import Status
from .models import Priority

@click.command(name='create-admin')
@with_appcontext
def create_admin() -> None:
    """Cria um usu√°rio admin com credenciais padr√£o."""
    
    # verifica se o admin j√° existe
    if User.query.filter_by(username='admin').first():
        print("Usu√°rio 'admin' j√° existe.")
        return
        
    # cria o novo usu√°rio admin
    admin_user = User(
        username='admin',
        first_name='Admin',
        last_name='Master',
        password_hash='admin',
        email='admin@tickets.com',
        admin=True
    )
    
    # define a senha usando o m√©todo set_password
    admin_user.set_password('admin')
    
    # salva o usu√°rio no banco de dados
    db.session.add(admin_user)
    db.session.commit()
    
    print("usu√°rio 'admin' criado com sucesso.")

@click.command(name='seed-users')
@with_appcontext
def seed_users():
    """Cria 20 usu√°rios de teste e associa-os a setores existentes."""
    
    # verifica se j√° existem usu√°rios suficientes (al√©m do admin)
    if User.query.count() > 1:
        print("A base de dados j√° parece estar povoada com usu√°rios.")
        return

    # inicializa o Faker
    fake = Faker('pt_BR')

    # busca todos os setores existentes para fazer a associa√ß√£o
    all_sectors = Sector.query.all()
    if not all_sectors:
        print("Erro: N√£o foram encontrados setores na base de dados. Execute 'flask seed-subjects' primeiro.")
        return

    print("Criando 20 usu√°rios de teste...")
    for i in range(20):
        first_name = fake.first_name()
        last_name = fake.last_name()
        username = f"{first_name.lower()}.{last_name.lower()}{random.randint(1, 99)}"

        # remove acentua√ß√£o e espa√ßos
        normalize = str.maketrans('', '', '√°√†√£√¢√©√™√≠√≥√¥√µ√∫√ß ')
        username = username.translate(normalize)
        email = f"{username}@fakemail.com"

        # garante que o email e o username sejam √∫nicos
        if User.query.filter_by(email=email).first() or User.query.filter_by(username=username).first():
            continue # salta esta itera√ß√£o se j√° existir

        new_user = User(
            username=username,
            email=email,
            first_name=first_name,
            last_name=last_name,
            admin=False # nenhum dos usu√°rios falsos ser√° admin
        )
        new_user.set_password('fake') # senha padr√£o

        # associa o usu√°rio a um n√∫mero aleat√≥rio de setores (entre 1 e 3)
        num_sectors = random.randint(1, min(3, len(all_sectors)))
        selected_sectors = random.sample(all_sectors, num_sectors)
        new_user.sectors.extend(selected_sectors)
        
        db.session.add(new_user)
        print(f"Criando usu√°rio: {username}")

    db.session.commit()
    print("20 usu√°rios de teste criados e associados a setores com sucesso.")

@click.command(name='seed-subjects')
@with_appcontext
def seed_subjects() -> None:
    """Cria uma lista de subjects iniciais se eles n√£o existirem."""
    
    # Lista de setores e os seus respetivos subjects
    initial_data = {
        "TI": [
            "Problemas com Login/Senha",
            "Computador Lento ou a Travar",
            "Pedido de Instala√ß√£o de Software",
            "Problema com Impressora",
            "Falha de Rede ou Internet",
            "Cria√ß√£o de Email para Novo Colaborador"
        ],
        "Financeiro": [
            "D√∫vida sobre Folha de Pagamento",
            "Pedido de Reembolso de Despesas",
            "Problema com Fatura de Fornecedor",
            "Acesso ao Sistema Financeiro",
            "Solicita√ß√£o de Relat√≥rio de Custos"
        ],
        "Diretoria": [
            "Prepara√ß√£o de Relat√≥rio Estrat√©gico",
            "Agendamento de Reuni√£o Confidencial",
            "Problema com Equipamento de Videoconfer√™ncia",
            "Pedido de Acesso a Dashboards de Gest√£o"
        ],
        "Compras": [
            "Cria√ß√£o de Novo Pedido de Compra",
            "Aprova√ß√£o de Or√ßamento",
            "Cadastro de Novo Fornecedor",
            "D√∫vida sobre Contrato com Fornecedor"
        ],
        "RH": [
            "D√∫vida sobre F√©rias ou Aus√™ncias",
            "Altera√ß√£o de Dados Cadastrais",
            "Pedido de Declara√ß√£o de V√≠nculo",
            "Informa√ß√µes sobre Benef√≠cios (Plano de Sa√∫de, etc.)",
            "Quest√µes sobre Ponto Eletr√≥nico"
        ],
        "Marketing": [
            "Pedido de Cria√ß√£o de Arte Gr√°fica",
            "Aprova√ß√£o de Conte√∫do para Redes Sociais",
            "Problema de Acesso a Ferramentas de Marketing",
            "Relat√≥rio de Performance de Campanhas"
        ],
        "Jur√≠dico": [
            "An√°lise de Contrato ou Documento Legal",
            "D√∫vida sobre LGPD (Lei Geral de Prote√ß√£o de Dados)",
            "Pedido de Documento Societ√°rio",
            "Consulta sobre Processo Jur√≠dico"
        ],
        "Opera√ß√µes e Log√≠stica": [
            "Problema no Controlo de Stock",
            "Avaria em Equipamento de Armaz√©m",
            "Rastreamento de Entrega de Mercadoria",
            "Pedido de Material de Expedi√ß√£o"
        ],
        "Vendas": [
            "Problema com o Sistema de CRM",
            "Pedido de Aprova√ß√£o de Desconto para Cliente",
            "Atualiza√ß√£o de Pipeline de Vendas",
            "D√∫vida sobre C√°lculo de Comiss√£o"
        ],
        "Manuten√ß√£o e Instala√ß√µes": [
            "Abertura de Ordem de Servi√ßo (Reparo)",
            "Pedido de Manuten√ß√£o Preventiva (Ar Condicionado, etc.)",
            "Relato de Problema Predial (Infiltra√ß√£o, El√©trico)",
            "Solicita√ß√£o de Reparo de Mobili√°rio"
        ]
    }
    
    print("Verificando e criando dados iniciais...")
    
    # cria os setores
    for sector_name in initial_data.keys():
        if not Sector.query.filter_by(name=sector_name).first():
            new_sector = Sector(name=sector_name)
            db.session.add(new_sector)
            print(f'Criando setor: "{sector_name}"')
    # guarda os novos setores na base de dados antes de continuar
    db.session.commit()

    # criar os assuntos e os associa aos setores
    for sector_name, subject_names in initial_data.items():
        # encontra o setor que acabou de criar/verificar
        sector = Sector.query.filter_by(name=sector_name).first()
        if not sector:
            continue

        for subject_name in subject_names:
            # verifica se o assunto j√° existe
            subject = Subject.query.filter_by(name=subject_name).first()
            
            # se n√£o existir, cria-o
            if not subject:
                subject = Subject(name=subject_name)
                db.session.add(subject)
                print(f'Criando assunto: "{subject_name}"')
            
            # associa o assunto ao setor, se a associa√ß√£o ainda n√£o existir
            if sector not in subject.sectors:
                subject.sectors.append(sector)
                print(f'A ligar "{subject_name}" ao setor "{sector_name}"')

    # Guarda todas as novas cria√ß√µes e associa√ß√µes na base de dados
    db.session.commit()
    print("Povoamento da base de dados conclu√≠do com sucesso.")

@click.command(name='seed-statuses')
@with_appcontext
def seed_statuses() -> None:
    """Cria uma lista de statuses iniciais se eles n√£o existirem."""
    
    # Lista de statuses iniciais com cores associadas
    initial_statuses = [
        ("Aberto", "üÜï"),        
        ("Aguardando", "üïô"),    
        ("Em Progresso", "üí≠"),  
        ("Editado", "‚úèÔ∏è"),       
        ("Resolvido", "‚úÖ"),     
        ("Fechado", "üîí")       
    ]
    
    print("Verificando e criando statuses iniciais...")
    
    for name, symbol in initial_statuses:
        if not Status.query.filter_by(name=name).first():
            new_status = Status(name=name, symbol=symbol)
            db.session.add(new_status)
            print(f'Criando status: "{name}" com o s√≠mbolo "{symbol}"')

    db.session.commit()
    print("Povoamento dos statuses conclu√≠do com sucesso.")

@click.command(name='seed-priorities')
@with_appcontext
def seed_priorities() -> None:
    """Cria uma lista de prioridades iniciais se elas n√£o existirem."""

    # Lista de prioridades iniciais com cores associadas
    initial_priorities = [
        ("Baixa", "#28A745"),
        ("M√©dia", "#FFC107"),
        ("Alta", "#DC3545"),
        ("Urgente", "#000000")
    ]

    print("Verificando e criando prioridades iniciais...")

    for name, color in initial_priorities:
        if not Priority.query.filter_by(name=name).first():
            new_priority = Priority(name=name, color=color)
            db.session.add(new_priority)
            print(f'Criando prioridade: "{name}" com a cor "{color}"')

    db.session.commit()
    print("Povoamento das prioridades conclu√≠do com sucesso.")
